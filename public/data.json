{
  "metadata": {
    "title": "SE3318: Software Construction - Final Exam Study Hub",
    "description": "Comprehensive study materials for SE3318 Software Construction final exam",
    "weeks": "9-14",
    "totalRules": "33+",
    "concepts": "50+",
    "examples": "100+"
  },
  "weeklyContent": [
    {
      "id": "week9",
      "title": "Week 9: Working Classes",
      "color": "from-blue-500 to-cyan-500",
      "bgColor": "from-blue-50/80 to-cyan-50/80",
      "textColor": "text-blue-900",
      "sections": [
        {
          "title": "Abstract Data Types (ADTs)",
          "content": [
            {
              "subtitle": "Core Concepts",
              "items": [
                "Abstraction: Simplifying complex details by hiding lower-level implementations",
                "Modularity: Dividing system into independent components",
                "Encapsulation: Hiding internal details from the rest of the system",
                "Separation of Concerns: Making specific features belong to single modules",
                "User-Defined Types: Types defined by operations that can be performed on them"
              ],
              "examples": []
            }
          ]
        },
        {
          "title": "Liskov Substitution Principle (LSP)",
          "content": [
            {
              "subtitle": "Key Concept",
              "items": [
                "Objects of a superclass should be replaceable with objects of its subclasses without breaking the application",
                "Overridden methods in subclasses need to accept same or less restrictive input parameter values"
              ],
              "examples": []
            }
          ]
        },
        {
          "title": "Law of Demeter",
          "content": [
            {
              "subtitle": "Rule",
              "items": [
                "An object should only \"talk\" to its immediate friends",
                "Within a method, only call methods on: the object itself (this), objects passed as arguments, objects created within the method, direct component objects"
              ],
              "examples": [
                {
                  "type": "violation",
                  "code": "a.getB().getC().doSomething()"
                },
                {
                  "type": "correct",
                  "code": "a.doSomethingWithC() // where a handles B and C internally"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "checkstyleRules": [
    {
      "id": "class-level",
      "title": "Class-Level Checks",
      "description": "These checks apply to the overall structure, naming, and dependencies of classes.",
      "color": "from-blue-500 to-cyan-500",
      "bgColor": "from-blue-50/80 to-cyan-50/80",
      "textColor": "text-blue-900",
      "icon": "DocumentTextIcon",
      "rules": [
        {
          "name": "VisibilityModifier",
          "whereUsed": "Class (Fields)",
          "whatItChecks": "Ensures proper visibility of class members. By default, fields should be private. Only static final or truly immutable fields may be public.",
          "whyItMatters": "Enforces good encapsulation; hides implementation details; reduces external dependencies.",
          "commonViolations": [
            "public int num1; // non-final public field",
            "protected String field2; // protected field often disallowed"
          ],
          "correctUsage": [
            "private int num1; // proper private field",
            "public static final int CONSTANT = 5; // acceptable public constant"
          ]
        }
      ]
    }
  ],
  "quickReference": {
    "essentialConcepts": [
      {
        "title": "Abstract Data Types (ADTs)",
        "icon": "BookOpenIcon",
        "color": "from-blue-500 to-cyan-500",
        "bgColor": "from-blue-50/80 to-cyan-50/80",
        "textColor": "text-blue-900",
        "points": [
          "Abstraction: Hide complex implementation details",
          "Modularity: Independent, reusable components",
          "Encapsulation: Internal details hidden from outside",
          "User-defined types defined by their operations"
        ]
      }
    ],
    "checkstyleCheatSheet": [
      {
        "category": "Class-Level",
        "color": "bg-blue-500",
        "rules": [
          "VisibilityModifier: Fields should be private",
          "FinalClass: Utility classes should be final",
          "HideUtilityClassConstructor: Private constructor for utility classes"
        ]
      }
    ],
    "tableDrivenMethods": [
      {
        "type": "Direct Access",
        "icon": "RocketLaunchIcon",
        "color": "from-blue-500 to-blue-600",
        "description": "Use input value directly as array index",
        "example": "charTypeTable[97] for character 'a'",
        "advantages": ["Very fast lookup (O(1))", "Simple implementation"],
        "disadvantages": ["Can waste memory if sparse", "Requires contiguous input range"],
        "bestFor": "Small, contiguous input ranges"
      }
    ],
    "examSuccessTips": [
      {
        "title": "Understanding Over Memorization",
        "icon": "LightBulbIcon",
        "color": "text-yellow-600",
        "tips": [
          "Focus on WHY each rule exists, not just what it checks",
          "Understand the principles behind good software design",
          "Connect rules to real-world maintenance problems",
          "Practice explaining concepts in your own words"
        ]
      }
    ],
    "commonMistakes": [
      {
        "category": "Checkstyle Rules",
        "icon": "ExclamationTriangleIcon",
        "color": "text-red-600",
        "mistakes": [
          "Confusing when to use @Override vs when not to",
          "Mixing up camelCase vs UPPER_CASE naming conventions",
          "Forgetting that utility classes need private constructors",
          "Not understanding the difference between assertions and exceptions"
        ]
      }
    ]
  }
} 